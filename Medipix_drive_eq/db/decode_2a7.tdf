--lpm_decode DEVICE_FAMILY="Cyclone IV E" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 10.0SP1 cbx_cycloneii 2010:08:18:21:07:12:SJ cbx_lpm_add_sub 2010:08:18:21:07:12:SJ cbx_lpm_compare 2010:08:18:21:07:12:SJ cbx_lpm_decode 2010:08:18:21:07:12:SJ cbx_mgl 2010:08:18:21:11:11:SJ cbx_stratix 2010:08:18:21:07:13:SJ cbx_stratixii 2010:08:18:21:07:13:SJ  VERSION_END


-- Copyright (C) 1991-2010 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_2a7
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode787w[1..0]	: WIRE;
	w_anode796w[3..0]	: WIRE;
	w_anode813w[3..0]	: WIRE;
	w_anode823w[3..0]	: WIRE;
	w_anode833w[3..0]	: WIRE;
	w_anode843w[3..0]	: WIRE;
	w_anode853w[3..0]	: WIRE;
	w_anode863w[3..0]	: WIRE;
	w_anode873w[3..0]	: WIRE;
	w_anode885w[1..0]	: WIRE;
	w_anode892w[3..0]	: WIRE;
	w_anode903w[3..0]	: WIRE;
	w_anode913w[3..0]	: WIRE;
	w_anode923w[3..0]	: WIRE;
	w_anode933w[3..0]	: WIRE;
	w_anode943w[3..0]	: WIRE;
	w_anode953w[3..0]	: WIRE;
	w_anode963w[3..0]	: WIRE;
	w_data785w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode963w[3..3], w_anode953w[3..3], w_anode943w[3..3], w_anode933w[3..3], w_anode923w[3..3], w_anode913w[3..3], w_anode903w[3..3], w_anode892w[3..3]), ( w_anode873w[3..3], w_anode863w[3..3], w_anode853w[3..3], w_anode843w[3..3], w_anode833w[3..3], w_anode823w[3..3], w_anode813w[3..3], w_anode796w[3..3]));
	w_anode787w[] = ( (w_anode787w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode796w[] = ( (w_anode796w[2..2] & (! w_data785w[2..2])), (w_anode796w[1..1] & (! w_data785w[1..1])), (w_anode796w[0..0] & (! w_data785w[0..0])), w_anode787w[1..1]);
	w_anode813w[] = ( (w_anode813w[2..2] & (! w_data785w[2..2])), (w_anode813w[1..1] & (! w_data785w[1..1])), (w_anode813w[0..0] & w_data785w[0..0]), w_anode787w[1..1]);
	w_anode823w[] = ( (w_anode823w[2..2] & (! w_data785w[2..2])), (w_anode823w[1..1] & w_data785w[1..1]), (w_anode823w[0..0] & (! w_data785w[0..0])), w_anode787w[1..1]);
	w_anode833w[] = ( (w_anode833w[2..2] & (! w_data785w[2..2])), (w_anode833w[1..1] & w_data785w[1..1]), (w_anode833w[0..0] & w_data785w[0..0]), w_anode787w[1..1]);
	w_anode843w[] = ( (w_anode843w[2..2] & w_data785w[2..2]), (w_anode843w[1..1] & (! w_data785w[1..1])), (w_anode843w[0..0] & (! w_data785w[0..0])), w_anode787w[1..1]);
	w_anode853w[] = ( (w_anode853w[2..2] & w_data785w[2..2]), (w_anode853w[1..1] & (! w_data785w[1..1])), (w_anode853w[0..0] & w_data785w[0..0]), w_anode787w[1..1]);
	w_anode863w[] = ( (w_anode863w[2..2] & w_data785w[2..2]), (w_anode863w[1..1] & w_data785w[1..1]), (w_anode863w[0..0] & (! w_data785w[0..0])), w_anode787w[1..1]);
	w_anode873w[] = ( (w_anode873w[2..2] & w_data785w[2..2]), (w_anode873w[1..1] & w_data785w[1..1]), (w_anode873w[0..0] & w_data785w[0..0]), w_anode787w[1..1]);
	w_anode885w[] = ( (w_anode885w[0..0] & data_wire[3..3]), enable_wire);
	w_anode892w[] = ( (w_anode892w[2..2] & (! w_data785w[2..2])), (w_anode892w[1..1] & (! w_data785w[1..1])), (w_anode892w[0..0] & (! w_data785w[0..0])), w_anode885w[1..1]);
	w_anode903w[] = ( (w_anode903w[2..2] & (! w_data785w[2..2])), (w_anode903w[1..1] & (! w_data785w[1..1])), (w_anode903w[0..0] & w_data785w[0..0]), w_anode885w[1..1]);
	w_anode913w[] = ( (w_anode913w[2..2] & (! w_data785w[2..2])), (w_anode913w[1..1] & w_data785w[1..1]), (w_anode913w[0..0] & (! w_data785w[0..0])), w_anode885w[1..1]);
	w_anode923w[] = ( (w_anode923w[2..2] & (! w_data785w[2..2])), (w_anode923w[1..1] & w_data785w[1..1]), (w_anode923w[0..0] & w_data785w[0..0]), w_anode885w[1..1]);
	w_anode933w[] = ( (w_anode933w[2..2] & w_data785w[2..2]), (w_anode933w[1..1] & (! w_data785w[1..1])), (w_anode933w[0..0] & (! w_data785w[0..0])), w_anode885w[1..1]);
	w_anode943w[] = ( (w_anode943w[2..2] & w_data785w[2..2]), (w_anode943w[1..1] & (! w_data785w[1..1])), (w_anode943w[0..0] & w_data785w[0..0]), w_anode885w[1..1]);
	w_anode953w[] = ( (w_anode953w[2..2] & w_data785w[2..2]), (w_anode953w[1..1] & w_data785w[1..1]), (w_anode953w[0..0] & (! w_data785w[0..0])), w_anode885w[1..1]);
	w_anode963w[] = ( (w_anode963w[2..2] & w_data785w[2..2]), (w_anode963w[1..1] & w_data785w[1..1]), (w_anode963w[0..0] & w_data785w[0..0]), w_anode885w[1..1]);
	w_data785w[2..0] = data_wire[2..0];
END;
--VALID FILE
