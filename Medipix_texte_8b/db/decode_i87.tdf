--lpm_decode DEVICE_FAMILY="Cyclone IV E" LPM_DECODES=8 LPM_WIDTH=3 data enable eq
--VERSION_BEGIN 10.0SP1 cbx_cycloneii 2010:08:18:21:07:12:SJ cbx_lpm_add_sub 2010:08:18:21:07:12:SJ cbx_lpm_compare 2010:08:18:21:07:12:SJ cbx_lpm_decode 2010:08:18:21:07:12:SJ cbx_mgl 2010:08:18:21:11:11:SJ cbx_stratix 2010:08:18:21:07:13:SJ cbx_stratixii 2010:08:18:21:07:13:SJ  VERSION_END


-- Copyright (C) 1991-2010 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.



--synthesis_resources = lut 8 
SUBDESIGN decode_i87
( 
	data[2..0]	:	input;
	enable	:	input;
	eq[7..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[7..0]	: WIRE;
	eq_wire[7..0]	: WIRE;
	w_anode681w[3..0]	: WIRE;
	w_anode698w[3..0]	: WIRE;
	w_anode708w[3..0]	: WIRE;
	w_anode718w[3..0]	: WIRE;
	w_anode728w[3..0]	: WIRE;
	w_anode738w[3..0]	: WIRE;
	w_anode748w[3..0]	: WIRE;
	w_anode758w[3..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[7..0] = eq_wire[7..0];
	eq_wire[] = ( w_anode758w[3..3], w_anode748w[3..3], w_anode738w[3..3], w_anode728w[3..3], w_anode718w[3..3], w_anode708w[3..3], w_anode698w[3..3], w_anode681w[3..3]);
	w_anode681w[] = ( (w_anode681w[2..2] & (! data_wire[2..2])), (w_anode681w[1..1] & (! data_wire[1..1])), (w_anode681w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode698w[] = ( (w_anode698w[2..2] & (! data_wire[2..2])), (w_anode698w[1..1] & (! data_wire[1..1])), (w_anode698w[0..0] & data_wire[0..0]), enable_wire);
	w_anode708w[] = ( (w_anode708w[2..2] & (! data_wire[2..2])), (w_anode708w[1..1] & data_wire[1..1]), (w_anode708w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode718w[] = ( (w_anode718w[2..2] & (! data_wire[2..2])), (w_anode718w[1..1] & data_wire[1..1]), (w_anode718w[0..0] & data_wire[0..0]), enable_wire);
	w_anode728w[] = ( (w_anode728w[2..2] & data_wire[2..2]), (w_anode728w[1..1] & (! data_wire[1..1])), (w_anode728w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode738w[] = ( (w_anode738w[2..2] & data_wire[2..2]), (w_anode738w[1..1] & (! data_wire[1..1])), (w_anode738w[0..0] & data_wire[0..0]), enable_wire);
	w_anode748w[] = ( (w_anode748w[2..2] & data_wire[2..2]), (w_anode748w[1..1] & data_wire[1..1]), (w_anode748w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode758w[] = ( (w_anode758w[2..2] & data_wire[2..2]), (w_anode758w[1..1] & data_wire[1..1]), (w_anode758w[0..0] & data_wire[0..0]), enable_wire);
END;
--VALID FILE
